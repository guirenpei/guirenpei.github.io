{"meta":{"title":"桂仁沛的小世界","subtitle":"One Page","description":"One Page","author":"徐腾峰","url":"http://blog.xutengfeng.com"},"pages":[{"title":"分类","date":"2017-11-26T12:22:43.000Z","updated":"2017-11-26T12:45:56.928Z","comments":false,"path":"categories/index.html","permalink":"http://blog.xutengfeng.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-26T12:24:31.000Z","updated":"2017-11-26T13:11:15.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.xutengfeng.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Array.prototype.find() not work in IE","slug":"Array-prototype-find-not-work-in-IE","date":"2018-07-13T08:11:39.000Z","updated":"2018-07-13T08:21:21.000Z","comments":true,"path":"2018/07/13/Array-prototype-find-not-work-in-IE/","link":"","permalink":"http://blog.xutengfeng.com/2018/07/13/Array-prototype-find-not-work-in-IE/","excerpt":"","text":"12在修复一个windows版本的微信客户端打开公众号网页的时候碰到的一个问题。在排查完问题之后，发现这样一幅图","categories":[],"tags":[]},{"title":"结构型模式","slug":"结构型模式","date":"2018-07-10T03:38:23.000Z","updated":"2018-07-10T12:32:05.121Z","comments":true,"path":"2018/07/10/结构型模式/","link":"","permalink":"http://blog.xutengfeng.com/2018/07/10/结构型模式/","excerpt":"","text":"结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计 外观模式（Facade Pattern） 适配器模式（Adapter Pattern） 代理模式（Proxy Pattern） 装饰器模式（Decorator Pattern） 桥接模式（Bridge Pattern） 组合模式（Composite Pattern） 享元模式（Flyweight Pattern） 12345678910111213141516171819/** * 外观模式（Facade）：为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得 * 对子系统接口的访问更容易。在Javascript中有时也会用于对底层结构兼容性做同意封装来简化 * 用户使用 */// 外观模式实现function addEvent(dom, type, fn) &#123; // 对于支持DOM2级时间处理程序addEventListener方法的浏览器 if (dom.addEventListener) &#123; dom.addEventListener(type, fn, false); // 对于不支持addEventListener方法但支持attachEvent方法的浏览器 &#125; else if (dom.attachEvent) &#123; dom.attach(`on$&#123;type&#125;`, fn); // 对于不支持addEventListener方法也不支持attachEven，但支持on+事件的浏览器 &#125; else &#123; dom[`on$&#123;type&#125;`] = fn; &#125;&#125; 本文所有相关内容均来自于张容铭作者的Javascript设计模式，只供学习所用，切勿转载。如有侵权，请联系我，我会立即删除","categories":[],"tags":[{"name":"javascript design","slug":"javascript-design","permalink":"http://blog.xutengfeng.com/tags/javascript-design/"}]},{"title":"test","slug":"test","date":"2017-11-26T11:15:14.000Z","updated":"2018-07-10T03:35:15.000Z","comments":true,"path":"2017/11/26/test/","link":"","permalink":"http://blog.xutengfeng.com/2017/11/26/test/","excerpt":"","text":"haha","categories":[{"name":"编程","slug":"programming","permalink":"http://blog.xutengfeng.com/categories/programming/"}],"tags":[{"name":"测试","slug":"测试","permalink":"http://blog.xutengfeng.com/tags/测试/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-26T08:43:51.132Z","updated":"2018-07-10T03:35:19.000Z","comments":true,"path":"2017/11/26/hello-world/","link":"","permalink":"http://blog.xutengfeng.com/2017/11/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}