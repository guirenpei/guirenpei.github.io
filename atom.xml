<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>桂仁沛的小世界</title>
  
  <subtitle>One Page</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xutengfeng.com/"/>
  <updated>2018-07-29T10:08:55.000Z</updated>
  <id>http://blog.xutengfeng.com/</id>
  
  <author>
    <name>徐腾峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>行为型模式</title>
    <link href="http://blog.xutengfeng.com/2018/07/25/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.xutengfeng.com/2018/07/25/行为型模式/</id>
    <published>2018-07-25T15:04:56.000Z</published>
    <updated>2018-07-29T10:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计"><a href="#结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计" class="headerlink" title="结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计"></a>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计</h3><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h3 id="模板方法模式（Template-Method）"><a href="#模板方法模式（Template-Method）" class="headerlink" title="模板方法模式（Template Method）"></a>模板方法模式（Template Method）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板方法模式（Template Method）：父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，</span></span><br><span class="line"><span class="comment"> * 使得子类可以不改变父类的算法结构的同时可重新定义算法中的某些实现步骤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示框归一化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建基本提示框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板类 基础提示框 data渲染数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alert</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="comment">// 没有数据则返回，防止后面程序执行</span></span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置内容</span></span><br><span class="line">    <span class="keyword">this</span>.content = data.content;</span><br><span class="line">    <span class="comment">// 创建提示框面板</span></span><br><span class="line">    <span class="keyword">this</span>.panel = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="comment">// 创建提示内容组件</span></span><br><span class="line">    <span class="keyword">this</span>.contentNode = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">    <span class="comment">// 创建确定按钮组件</span></span><br><span class="line">    <span class="keyword">this</span>.confirmBtn = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    <span class="comment">// 创建关闭按钮组件</span></span><br><span class="line">    <span class="keyword">this</span>.closeBtn = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    <span class="comment">// 为提示框面板添加类</span></span><br><span class="line">    <span class="keyword">this</span>.panel.className = <span class="string">'alert'</span>;</span><br><span class="line">    <span class="comment">// 为关闭按钮添加类</span></span><br><span class="line">    <span class="keyword">this</span>.closeBtn.className = <span class="string">'a-close'</span>;</span><br><span class="line">    <span class="comment">// 为确定按钮添加类</span></span><br><span class="line">    <span class="keyword">this</span>.confirmBtn.className = <span class="string">'a-confirm'</span>;</span><br><span class="line">    <span class="comment">// 为确定按钮添加文案</span></span><br><span class="line">    <span class="keyword">this</span>.confirmBtn.innerHTML = data.confirm || <span class="string">'确认'</span>;</span><br><span class="line">    <span class="comment">// 为提示内容添加文本</span></span><br><span class="line">    <span class="keyword">this</span>.contentNode.innerHTML = <span class="keyword">this</span>.content;</span><br><span class="line">    <span class="comment">// 点击确定按钮执行方法 如果data中有success方法则为success方法，否则为空函数</span></span><br><span class="line">    <span class="keyword">this</span>.succes = data.success || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// 点击关闭按钮执行方法</span></span><br><span class="line">    <span class="keyword">this</span>.fail = data.fail || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建方法</span></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// 生成提示框</span></span><br><span class="line">    <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.closeBtn);</span><br><span class="line">    <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.contentNode);</span><br><span class="line">    <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.confirmBtn);</span><br><span class="line">    <span class="comment">// 插入到页面中</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.panel);</span><br><span class="line">    <span class="comment">// 绑定事件</span></span><br><span class="line">    <span class="keyword">this</span>.bindEvent();</span><br><span class="line">    <span class="comment">// 显示提示框</span></span><br><span class="line">    <span class="keyword">this</span>.show();</span><br><span class="line">  &#125;</span><br><span class="line">  bindEvent() &#123;</span><br><span class="line">    <span class="comment">// 关闭按钮点击事件</span></span><br><span class="line">    <span class="keyword">this</span>.closeBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行关闭取消方法</span></span><br><span class="line">      <span class="keyword">this</span>.fail();</span><br><span class="line">      <span class="comment">// 隐藏弹层</span></span><br><span class="line">      <span class="keyword">this</span>.hide();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 隐藏弹层方法</span></span><br><span class="line">  hide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.panel.style.display = <span class="string">'none'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 显示弹层方法</span></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">this</span>.panel.style.display = <span class="string">'block'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据模板创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RightAlert</span> <span class="keyword">extends</span> <span class="title">Alert</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">super</span>(data);</span><br><span class="line">    <span class="comment">// 为确认按钮添加right类设置位置居右</span></span><br><span class="line">    <span class="keyword">this</span>.confirmBtn.className = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.confirmBtn.className&#125;</span> right`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标题提示框</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleAlert</span> <span class="keyword">extends</span> <span class="title">Alert</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">super</span>(data);</span><br><span class="line">    <span class="comment">// 设置标题内容</span></span><br><span class="line">    <span class="keyword">this</span>.title = data.title;</span><br><span class="line">    <span class="comment">// 创建标题组件</span></span><br><span class="line">    <span class="keyword">this</span>.titleNode = <span class="built_in">document</span>.createElement(<span class="string">'h3'</span>);</span><br><span class="line">    <span class="comment">// 标题组件中写入标题内容</span></span><br><span class="line">    <span class="keyword">this</span>.titleNode.innerHTML = <span class="keyword">this</span>.title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最基本提示框创建方法拓展</span></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// 插入标题</span></span><br><span class="line">    <span class="keyword">this</span>.panel.insertBefore(<span class="keyword">this</span>.titleNode, <span class="keyword">this</span>.panel.firstChild);</span><br><span class="line">    <span class="comment">// 继承基本提示框的init方法</span></span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承类也可作为模板类</span></span><br><span class="line"><span class="comment">// 带有取消按钮的弹出框</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CancelAlert</span> <span class="keyword">extends</span> <span class="title">TitleAlert</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">super</span>(data);</span><br><span class="line">    <span class="comment">// 取消按钮文案</span></span><br><span class="line">    <span class="keyword">this</span>.cancel = data.cancel;</span><br><span class="line">    <span class="comment">// 创建取消按钮</span></span><br><span class="line">    <span class="keyword">this</span>.cancelBtn = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    <span class="comment">// 为取消按钮添加类</span></span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.className = <span class="string">'cancel'</span>;</span><br><span class="line">    <span class="comment">// 设置取消按钮内容</span></span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.innerHTML = <span class="keyword">this</span>.cancel || <span class="string">'取消'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="comment">// 继承标题提示框创建方法</span></span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line">    <span class="comment">// 由于取消按钮要添加在末尾，所以在创建完其他组件后添加</span></span><br><span class="line">    <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.cancelBtn);</span><br><span class="line">  &#125;</span><br><span class="line">  bindEvent() &#123;</span><br><span class="line">    <span class="comment">// 标题提示框绑定事件方法继承</span></span><br><span class="line">    <span class="keyword">super</span>.bindEvent();</span><br><span class="line">    <span class="comment">// this.bindEvent();</span></span><br><span class="line">    <span class="comment">// 取消按钮绑定事件</span></span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.fail();</span><br><span class="line">      <span class="keyword">this</span>.hide();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> CancelAlert(&#123;</span><br><span class="line">  title: <span class="string">'提示标题'</span>,</span><br><span class="line">  content: <span class="string">'提示内容'</span>,</span><br><span class="line">  success: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'ok'</span>),</span><br><span class="line">  fail: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'cancel'</span>)</span><br><span class="line">&#125;).init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多类导航</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 其实模板方法模式不仅仅在我们归一化组件时使用，有时候创建页面时也是很常用的，</span></span><br><span class="line"><span class="comment"> * 比如创建三类导航，第一类是基础的，第二类是多了消息提醒功能，第三类多了后面</span></span><br><span class="line"><span class="comment"> * 显示网址功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化字符串方法</span></span><br><span class="line"><span class="keyword">const</span> formatString = <span class="function">(<span class="params">str, data</span>) =&gt;</span> str.replace(<span class="regexp">/\&#123;#(\w+)#\&#125;/g</span>, (match, key) =&gt; <span class="keyword">typeof</span> data[key] === <span class="literal">undefined</span> ? <span class="string">''</span> : data[key]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础导航</span></span><br><span class="line"><span class="keyword">const</span> Nav = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 基础导航样式模板</span></span><br><span class="line">  <span class="keyword">this</span>.item = <span class="string">'&lt;a href="&#123;#href#&#125;" title="&#123;#title#&#125;"&gt;&#123;#name#&#125;&lt;/a&gt;'</span>;</span><br><span class="line">  <span class="comment">// 创建字符串</span></span><br><span class="line">  <span class="keyword">this</span>.html = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">// 格式化数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.length; index += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.html += formatString(<span class="keyword">this</span>.item, data[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.html;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有消息提示信息导航</span></span><br><span class="line"><span class="keyword">const</span> NumNav = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 消息提醒信息组件模板</span></span><br><span class="line">  <span class="keyword">const</span> tpl = <span class="string">'&lt;b&gt;&#123;#num#&#125;&lt;/b&gt;'</span>;</span><br><span class="line">  <span class="comment">// 装饰数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    data[i].name += data[i].name + formatString(tpl, data[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 继承基础导航类，并返回字符串</span></span><br><span class="line">  <span class="keyword">return</span> Nav.call(<span class="keyword">this</span>, data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有链接的导航</span></span><br><span class="line"><span class="keyword">const</span> LinkNav = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 链接地址模板</span></span><br><span class="line">  <span class="keyword">const</span> tpl = <span class="string">'&lt;span&gt;&#123;#link#&lt;/span&gt;'</span>;</span><br><span class="line">  <span class="comment">// 装饰数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    data[i].name += <span class="string">`<span class="subst">$&#123;data[i]&#125;</span><span class="subst">$&#123;formatString(tpl, data[i])&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 继承基础导航类，并返回字符串</span></span><br><span class="line">  <span class="keyword">return</span> Nav.call(<span class="keyword">this</span>, data);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建导航更容易</span></span><br><span class="line"><span class="comment">// 获取导航容器</span></span><br><span class="line"><span class="keyword">const</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span><br><span class="line"><span class="comment">// 添加内容</span></span><br><span class="line">nav.innerHTML = NumNav([</span><br><span class="line">  &#123;</span><br><span class="line">    href: <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">    title: <span class="string">'百度一下，你就知道'</span>,</span><br><span class="line">    name: <span class="string">'百度'</span>,</span><br><span class="line">    num: <span class="string">'10'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    href: <span class="string">'https://www.taobao.com'</span>,</span><br><span class="line">    title: <span class="string">'淘宝商城'</span>,</span><br><span class="line">    name: <span class="string">'淘宝'</span>,</span><br><span class="line">    num: <span class="string">'2'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    href: <span class="string">'https://www.qq.com'</span>,</span><br><span class="line">    title: <span class="string">'腾讯首页'</span>,</span><br><span class="line">    name: <span class="string">'腾讯'</span>,</span><br><span class="line">    num: <span class="string">'3'</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a>观察者模式（Observer）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式（Observer）：又被称作发布-订阅者模式或消息机制，定义了一种依赖关系，</span></span><br><span class="line"><span class="comment"> * 决绝了主题对象与观察者之间功能的耦合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将观察者放在闭包中，当页面加载就立即执行</span></span><br><span class="line"><span class="keyword">const</span> Observer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 防止消息队列暴露而被篡改故将消息容器作为静态私有变量保存</span></span><br><span class="line">  <span class="keyword">const</span> __messages = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 注册消息接口</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; type 消息类型</span></span><br><span class="line"><span class="comment">     * @param &#123;function&#125; fn 相应的处理动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    regist: <span class="function">(<span class="params">type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果此消息不存在则应该创建一个该消息类型</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> __messages[type] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// 将该动作推入到消息对应的动作执行队列中</span></span><br><span class="line">        __messages[type] = [fn];</span><br><span class="line">        <span class="comment">// 如果此消息存在</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将动作方法推入该消息对应的动作执行序列中</span></span><br><span class="line">        __messages[type].push(fn);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 发布消息接口</span></span><br><span class="line">    fire: <span class="function">(<span class="params">type, args = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果该消息没有被注册，则返回</span></span><br><span class="line">      <span class="keyword">if</span> (!__messages[type]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> events = &#123;</span><br><span class="line">        type,</span><br><span class="line">        args</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 便利消息动作</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; __messages[type].length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 依次执行注册的消息对应的动作序列</span></span><br><span class="line">        __messages[type][i].call(<span class="keyword">this</span>, events);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除消息接口</span></span><br><span class="line">    remove: <span class="function">(<span class="params">type, fn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果消息动作队列存在</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(__messages[type])) &#123;</span><br><span class="line">        <span class="comment">// 从最后一个消息动作便利</span></span><br><span class="line">        <span class="keyword">let</span> i = __messages[type].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果存在该动作则在消息动作系列中移除相应动作</span></span><br><span class="line">          __messages[type][i] === fn &amp;&amp; __messages[type].splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Observer.regist(<span class="string">'test'</span>, (e) =&gt; <span class="built_in">console</span>.log(e.type, e.args.msg));</span><br><span class="line">Observer.fire(<span class="string">'test'</span>, &#123; <span class="attr">msg</span>: <span class="string">'传递参数'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 学生回答结果</span></span><br><span class="line">  <span class="keyword">this</span>.result = result;</span><br><span class="line">  <span class="comment">// 学生回答问题动作</span></span><br><span class="line">  <span class="keyword">this</span>.say = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span><br><span class="line">&#125;;</span><br><span class="line">Student.prototype.answer = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注册参数问题</span></span><br><span class="line">  Observer.regist(question, <span class="keyword">this</span>.say);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生呼呼睡觉，此时不能回答问题</span></span><br><span class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.result&#125;</span> <span class="subst">$&#123;question&#125;</span> 已被注销`</span>);</span><br><span class="line">  <span class="comment">// 取消对老师问题的监听</span></span><br><span class="line">  Observer.remove(question, <span class="keyword">this</span>.say);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Teacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 教师提问题的方法</span></span><br><span class="line">Teacher.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`问题是：<span class="subst">$&#123;question&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 发布提问消息</span></span><br><span class="line">  Observer.fire(question);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student1 = <span class="keyword">new</span> Student(<span class="string">'学生1回答问题'</span>);</span><br><span class="line"><span class="keyword">const</span> student2 = <span class="keyword">new</span> Student(<span class="string">'学生2回答问题'</span>);</span><br><span class="line"><span class="keyword">const</span> student3 = <span class="keyword">new</span> Student(<span class="string">'学生3回答问题'</span>);</span><br><span class="line"></span><br><span class="line">student1.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student1.answer(<span class="string">'简述观察者模式'</span>);</span><br><span class="line">student2.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student3.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student3.answer(<span class="string">'简述观察者模式'</span>);</span><br><span class="line"></span><br><span class="line">student3.sleep(<span class="string">'简述观察者模式'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">teacher.ask(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">teacher.ask(<span class="string">'简述观察者模式'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态模式（State）当一个对象的内部状态发生改变时，会导致行为的改变，</span></span><br><span class="line"><span class="comment"> * 这看起来像是改变了对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当需要判断的分支有点多时</span></span><br><span class="line"><span class="comment">// function showResult(result) &#123;</span></span><br><span class="line"><span class="comment">//   if (result === 0) &#123;</span></span><br><span class="line"><span class="comment">//     //</span></span><br><span class="line"><span class="comment">//   &#125; else if (result === 1) &#123;</span></span><br><span class="line"><span class="comment">//     //</span></span><br><span class="line"><span class="comment">//   &#125; else if (result === 2) &#123;</span></span><br><span class="line"><span class="comment">//     //</span></span><br><span class="line"><span class="comment">//   &#125; else if (result === 3) &#123;</span></span><br><span class="line"><span class="comment">//     //</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 状态对象的实现</span></span><br><span class="line"><span class="comment">// 可以将不同的判断结果疯转在状态对象内，然后该状态对象返回一个可被调用的接口方法，用于调用状态对象内部的某种方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ResultState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断结果保存在内部状态中</span></span><br><span class="line">  <span class="keyword">const</span> States = &#123;</span><br><span class="line">    <span class="comment">// 每种状态作为一种独立方法保存</span></span><br><span class="line">    state0: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 处理结果0</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这是第一种情况'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    state1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 处理结果1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这是第二种情况'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    state2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 处理结果2</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这是第三种情况'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    state3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 处理结果3</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这是第四种情况'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    States[<span class="string">`state<span class="subst">$&#123;result&#125;</span>`</span>] &amp;&amp; States[<span class="string">`state<span class="subst">$&#123;result&#125;</span>`</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 返回调用状态方法接口</span></span><br><span class="line">    show</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示结果</span></span><br><span class="line">ResultState.show(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建超级玛丽状态类</span></span><br><span class="line"><span class="keyword">const</span> MarryState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 内部状态私有变量</span></span><br><span class="line">  <span class="keyword">let</span> _currentState = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> states = &#123;</span><br><span class="line">    jump: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'jump'</span>),</span><br><span class="line">    move: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'move'</span>),</span><br><span class="line">    shoot: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'shoot'</span>),</span><br><span class="line">    squat: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'squat'</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 动作控制类</span></span><br><span class="line">  <span class="keyword">const</span> Action = &#123;</span><br><span class="line">    <span class="comment">// 改变状态方法</span></span><br><span class="line">    changeState: <span class="function"><span class="keyword">function</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 组合动作通过传递多个参数实现</span></span><br><span class="line">      <span class="keyword">const</span> arg = rest;</span><br><span class="line">      <span class="comment">// 重置内部状态</span></span><br><span class="line">      _currentState = &#123;&#125;;</span><br><span class="line">      <span class="keyword">if</span> (arg.length) &#123;</span><br><span class="line">        <span class="comment">// 遍历动作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arg.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 向内部状态添加动作</span></span><br><span class="line">          _currentState[arg[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 执行动作</span></span><br><span class="line">    goes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'触发一次动作'</span>);</span><br><span class="line">      <span class="comment">// 遍历内部状态保存的动作</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _currentState) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_currentState.hasOwnProperty(key)) &#123;</span><br><span class="line">          <span class="comment">// 如果该动作存在则执行</span></span><br><span class="line">          states[key] &amp;&amp; states[key]();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 返回接口方法 change、goes</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    change: Action.changeState,</span><br><span class="line">    goes: Action.goes</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> marry = <span class="keyword">new</span> MarryState();</span><br><span class="line">marry.change(<span class="string">'jump'</span>, <span class="string">'shoot'</span>)</span><br><span class="line">  .goes()</span><br><span class="line">  .goes()</span><br><span class="line">  .change(<span class="string">'shoot'</span>)</span><br><span class="line">  .goes();</span><br></pre></td></tr></table></figure><h3 id="策略模式（strategy）"><a href="#策略模式（strategy）" class="headerlink" title="策略模式（strategy）"></a>策略模式（strategy）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略模式（strategy）：将定义的一组算法封装起来，使其相互之间可以替换。</span></span><br><span class="line"><span class="comment"> * 封装的算法具有一定独立性，不会随客户端变化而变化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 策略对象</span></span><br><span class="line"><span class="comment">// 价格策略对象</span></span><br><span class="line"><span class="keyword">const</span> PriceStrategy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 内部算法对象</span></span><br><span class="line">  <span class="keyword">const</span> strategy = &#123;</span><br><span class="line">    <span class="comment">// 100返30</span></span><br><span class="line">    return30: <span class="function">(<span class="params">price</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// parseInt 可通过~~|等运算符替换，要注意此时price要在[-2147483648, 2147483647]之间</span></span><br><span class="line">      <span class="comment">// +price转化为数字类型</span></span><br><span class="line">      <span class="keyword">return</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>, <span class="number">10</span>) * <span class="number">30</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 100返50</span></span><br><span class="line">    return50: <span class="function">(<span class="params">price</span>) =&gt;</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>, <span class="number">10</span>) * <span class="number">50</span>,</span><br><span class="line">    <span class="comment">// 9折</span></span><br><span class="line">    percent90: <span class="function">(<span class="params">price</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Javascript在处理小数乘除法有bug，故运算前转化为证书</span></span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">100</span> * <span class="number">90</span> / <span class="number">10000</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 8折</span></span><br><span class="line">    percent80: <span class="function">(<span class="params">price</span>) =&gt;</span> price * <span class="number">100</span> * <span class="number">80</span> / <span class="number">10000</span>,</span><br><span class="line">    <span class="comment">// 5折</span></span><br><span class="line">    percent50: <span class="function">(<span class="params">price</span>) =&gt;</span> price * <span class="number">100</span> * <span class="number">50</span> / <span class="number">10000</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 策略算法调用接口</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">algorithm, price</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果算法存在，则调用算法，否则返回false</span></span><br><span class="line">    <span class="keyword">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> price = PriceStrategy(<span class="string">'return50'</span>, <span class="string">'314.67'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(price);</span><br><span class="line"><span class="comment">// 表单验证</span></span><br><span class="line"><span class="comment">// 表单正则验证策略对象</span></span><br><span class="line"><span class="keyword">const</span> InputStrategy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> strategy = &#123;</span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    notNull: <span class="function">(<span class="params">value</span>) =&gt;</span> /^\s+$/.test(value) ? <span class="string">'请输入内容'</span> : <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// 是否是一个数字</span></span><br><span class="line">    number: <span class="function">(<span class="params">value</span>) =&gt;</span> /^\d+(\.\d+)?$/.test(value) ? <span class="string">''</span> : <span class="string">'请输入数字'</span>,</span><br><span class="line">    <span class="comment">// 是否是本地电话</span></span><br><span class="line">    phone: <span class="function">(<span class="params">value</span>) =&gt;</span> /$\d&#123;<span class="number">3</span>&#125;\-\d&#123;<span class="number">8</span>&#125;$|^\d&#123;<span class="number">4</span>&#125;\-\d&#123;<span class="number">7</span>&#125;$/.test(value) ? <span class="string">''</span> : <span class="string">'请输入正确的电话号码格式，如：010-12345678或0418-1234567'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证接口</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; type 算法</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; value 表单值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 去除收尾空白符</span></span><br><span class="line">      value = value.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">      <span class="keyword">return</span> strategy[type] ? strategy[type](value) : <span class="string">'没有该类型的检查方法'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 添加策略</span></span><br><span class="line">    addStrategy: <span class="function">(<span class="params">type, fn</span>) =&gt;</span> strategy[type] = fn</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="职责链模式（chain-of-Responsibility）"><a href="#职责链模式（chain-of-Responsibility）" class="headerlink" title="职责链模式（chain of Responsibility）"></a>职责链模式（chain of Responsibility）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 职责链模式（chain of Responsibility）：解决请求的发送者于请求的接受者之间的耦合，</span></span><br><span class="line"><span class="comment"> * 通过职责链的多个对象对分解请求流程，实现庆祝在多个对象之间传递，直到最后一个对象完成</span></span><br><span class="line"><span class="comment"> * 请求的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 分解需求</span></span><br><span class="line"><span class="comment">// 既然完成一个需求要做这么多的事情，那就把每间事情独立出换一个模块对象去处理，这样完整的需求就被分解成一部分</span></span><br><span class="line"><span class="comment">// 一部分相互独立的模块需求，通过这些对象的分工协作，每个对象只做与自己分内的事，无关的事情传到下一个对象中去做，</span></span><br><span class="line"><span class="comment">// 直到需求完整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一站--请求模块</span></span><br><span class="line"><span class="comment">// 县创建一个异步请求模块对象，它应该只做向服务器端发送请求的事情</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步请求对象（简化版本）</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; data 请求数据</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; dealType 响应数据处理对象</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; dom 事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sendData = <span class="function"><span class="keyword">function</span>(<span class="params">data, dealType, dom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// XHR对象 简化版本 IE另行处理</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">'getData.php?mode=userInfo'</span>;</span><br><span class="line">  <span class="comment">// 请求返回时间</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      dealData(xhr.responseText, dealType, dom);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 请求失败</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 拼接请求字符串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</span><br><span class="line">      url += <span class="string">`&amp;<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;data[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发送异步请求</span></span><br><span class="line">  xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.send(<span class="literal">null</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 下一站--响应数据适配模块</span></span><br><span class="line"><span class="comment">// 在这个模块对象中没有对返回的结果做任何逻辑处理，直接将得到的结果传入响应数据</span></span><br><span class="line"><span class="comment">// 适配模块对象方法中，所以对于响应数据适配模块页应该处理一件事--适配相应数据</span></span><br><span class="line"><span class="comment">// （Ajax请求返回的数据）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理响应数据</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; data 请求数据</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; dealType 响应数据处理对象</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; dom 事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> dealData = <span class="function"><span class="keyword">function</span>(<span class="params">data, dealType, dom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对象toString方法简化引用</span></span><br><span class="line">  <span class="keyword">const</span> dataType = <span class="built_in">Object</span>.prototype.toString.call(data);</span><br><span class="line">  <span class="comment">// 判断相应数据处理对象</span></span><br><span class="line">  <span class="keyword">switch</span> (dealType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'sug'</span>:</span><br><span class="line">      <span class="comment">// 如果数据为数组</span></span><br><span class="line">      <span class="keyword">if</span> (dataType === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建提示框组件</span></span><br><span class="line">        <span class="keyword">return</span> createSug(data, dom);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将相应的对象数据转化为数组</span></span><br><span class="line">      <span class="keyword">if</span> (dataType === <span class="string">'[object object'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newData = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.hasOwnProperty(key)) &#123;</span><br><span class="line">            newData.push(data[key]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建提示框组件</span></span><br><span class="line">        <span class="keyword">return</span> createSug([data], dom);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createSug([data, dom]);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'validate'</span>:</span><br><span class="line">    <span class="comment">// 创建校验组件</span></span><br><span class="line">      <span class="keyword">return</span> createValidateResult(data, dom);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点站--创建组件模块</span></span><br><span class="line"><span class="comment">// 在响应数据适配模块中，适配了响应的数据，并将适配后的数据传入下一级创建组件模块中。</span></span><br><span class="line"><span class="comment">// 所以创建组件模块应该做的一件事是--根据相应数据创建组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建提示框组件</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; data 响应适配数据</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; dom 事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createSug = <span class="function"><span class="keyword">function</span>(<span class="params">data, dom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> len = data.length;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">  <span class="comment">// 拼接每一条提示语句</span></span><br><span class="line">  <span class="keyword">for</span> (;i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">    html += <span class="string">`&lt;li&gt;&lt;<span class="subst">$&#123;data[i]&#125;</span>/li&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 显示提示框</span></span><br><span class="line">  dom.parentNode.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>].innerHTML = html;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建校验组件</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; data 响应适配数据</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; dom 事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createValidateResult = <span class="function"><span class="keyword">function</span>(<span class="params">data, dom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 显示校验结果</span></span><br><span class="line">  dom.parentNode.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>].innerHTML = data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="命令模式（Command）"><a href="#命令模式（Command）" class="headerlink" title="命令模式（Command）"></a>命令模式（Command）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命令模式（Command）：将请求与实现解耦并风封装成独立对象，</span></span><br><span class="line"><span class="comment"> * 从而使不同的请求对客户端实现参数化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 需求分析</span></span><br><span class="line"><span class="comment">// 做个活动页面，平铺式的结构，不过页面的每个模块都有些类似的地方</span></span><br><span class="line"><span class="comment">// 比如每个预览产品图片区域，都有一行标题，然后标题的下面是产品图片</span></span><br><span class="line"><span class="comment">// 只是图片的数量与排列不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令模式就是将请求模块与实现模块解耦。命令模式是将创建模块的逻辑封装在一个</span></span><br><span class="line"><span class="comment">// 对象里，这个对象提供一个参数化的请求接口，通过调用这个接口并传递一些参数实现</span></span><br><span class="line"><span class="comment">// 调用命令对象内部的一些方法</span></span><br><span class="line"><span class="comment">// 请求部分很简单，只需要按照给定的参数格式书写指令即可，所以实现部分的封装才是</span></span><br><span class="line"><span class="comment">// 重点，因为它要为请求部分提供所需方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令对象</span></span><br><span class="line"><span class="comment">// 既然动态展示不同模块，所以创建元素这一需求就是变化的，因此创建元素方法、</span></span><br><span class="line"><span class="comment">// 展示方法应该被命令化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块实现模块</span></span><br><span class="line"><span class="keyword">const</span> viewCommand = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tpl = &#123;</span><br><span class="line">    <span class="comment">// 展示图片结构模板</span></span><br><span class="line">    product: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;img src="&#123;#src&#125;" /&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;#text&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">    <span class="comment">// 展示标题结构模板</span></span><br><span class="line">    title: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class="title"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="main"&gt;</span></span><br><span class="line"><span class="string">          &lt;h2&gt;&#123;#title&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;&#123;#tips&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> formatString = <span class="function">(<span class="params">str, data</span>) =&gt;</span> str.replace(<span class="regexp">/\&#123;#(\w+)#\&#125;/g</span>, (match, key) =&gt; <span class="keyword">typeof</span> data[key] === <span class="literal">undefined</span> ? <span class="string">''</span> : data[key]);</span><br><span class="line">  <span class="comment">// 方法集合</span></span><br><span class="line">  <span class="keyword">const</span> Action = &#123;</span><br><span class="line">    <span class="comment">// 创建方法</span></span><br><span class="line">    create: <span class="function">(<span class="params">data, view</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 解析数据 如果数据是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = data.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 将格式化之后的字符串缓存到html中</span></span><br><span class="line">          html += formatString(tpl[view], data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接格式化字符串缓存到html中</span></span><br><span class="line">        html += formatString(tpl[view], data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 展示方法</span></span><br><span class="line">    display: <span class="function"><span class="keyword">function</span>(<span class="params">container, data, view</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果传入数据</span></span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="comment">// 根据给定数据创建视图</span></span><br><span class="line">        <span class="keyword">this</span>.create(data, view);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 展示模块</span></span><br><span class="line">      <span class="built_in">document</span>.getElementById(container).innerHTML = html;</span><br><span class="line">      <span class="comment">// 展示后清空缓存的字符串</span></span><br><span class="line">      html = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 命令接口</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">excute</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 解析命令，如果msg.param不是数组则将其转化为数组（apply方法要求第二个参数为数组）</span></span><br><span class="line">    msg.param = <span class="built_in">Array</span>.isArray(msg.param) ? msg.param : [msg.param];</span><br><span class="line">    <span class="comment">// Action内部调用的方法引用this，所以此处为保证作用域this执行传入Action</span></span><br><span class="line">    Action[msg.command](...msg.param);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 产品展示数据</span></span><br><span class="line"><span class="keyword">const</span> productData = [</span><br><span class="line">  &#123;</span><br><span class="line">    src: <span class="string">'command/02.jpg'</span>,</span><br><span class="line">    text: <span class="string">'绽放的桃花'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    src: <span class="string">'command/02.jpg'</span>,</span><br><span class="line">    text: <span class="string">'绽放的桃花'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    src: <span class="string">'command/02.jpg'</span>,</span><br><span class="line">    text: <span class="string">'绽放的桃花'</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 模块标题数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titleData = &#123;</span><br><span class="line">  title: <span class="string">'夏日里的一片温馨'</span>,</span><br><span class="line">  tips: <span class="string">'暖暖的温情带给人们家的感受'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">viewCommand(&#123;</span><br><span class="line">  <span class="comment">// 参数说明 方法 display</span></span><br><span class="line">  command: <span class="string">'display'</span>,</span><br><span class="line">  <span class="comment">// 参数说明 param1元素容器 param2标题数据 param3元素模板</span></span><br><span class="line">  param: [<span class="string">'title'</span>, titleData, <span class="string">'title'</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="访问者模式（visitor）"><a href="#访问者模式（visitor）" class="headerlink" title="访问者模式（visitor）"></a>访问者模式（visitor）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问者模式（visitor）：针对于对象结构中的元素，定义在不改变该对象的前提下</span></span><br><span class="line"><span class="comment"> * 访问结构中元素的新方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置样式在用DOM2级时间为页面中的元素绑定事件的时候，为该元素设置一些css样式，</span></span><br><span class="line"><span class="comment">// 在标准浏览器下可以成功，在低版本IE下面不成功</span></span><br><span class="line"><span class="keyword">const</span> bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params">dom, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (dom.addEventListener) &#123;</span><br><span class="line">    dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dom.attachEvent) &#123;</span><br><span class="line">    dom.attachEvent(<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dom[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const demo = document.getElementById('demo');</span></span><br><span class="line"><span class="comment">// bindEvent(demo, 'click', function() &#123;</span></span><br><span class="line"><span class="comment">//   this.style.background = 'red';</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 低版本IE会报错，提示说'this.style为空或不为对象'</span></span><br><span class="line"><span class="comment">// 访问操作元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindIEEvent</span>(<span class="params">dom, type, fn, data = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  dom.attachEvent(<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, (e) =&gt; &#123;</span><br><span class="line">    fn.call(dom, e, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其实实现的核心就是调用了一次call方法。call和apply的作用就是更改函数执行时的作用域</span></span><br><span class="line"><span class="comment">// 这正是访问者模式的精髓，通过这两种方法就可以让某个对象在其他作用域中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象访问器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Visitor = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 截取方法</span></span><br><span class="line">    splice: <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// splice 方法参数，从元参数的第二个参数开始算起</span></span><br><span class="line">      <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.splice.call(rest, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 对第一个参数对象执行splice方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.splice.apply(rest[<span class="number">0</span>], args);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 追加数据方法</span></span><br><span class="line">    push: <span class="function"><span class="keyword">function</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 强化类数组对象，使他拥有length属性</span></span><br><span class="line">      <span class="keyword">const</span> len = rest[<span class="number">0</span>].length || <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 添加的数据从元参数的第二个参数玄奇</span></span><br><span class="line">      <span class="keyword">const</span> args = <span class="keyword">this</span>.splice(rest, <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(&#123; args &#125;);</span><br><span class="line">      <span class="comment">// 矫正length属性</span></span><br><span class="line">      rest[<span class="number">0</span>].length = len + rest.length - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 对第一个参数对象执行push方法</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.push.apply(rest[<span class="number">0</span>], args);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹出最后一次添加的元素</span></span><br><span class="line">    pop: <span class="function">(<span class="params">...rest</span>) =&gt;</span> <span class="built_in">Array</span>.prototype.pop.apply(rest[<span class="number">0</span>])</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(a.length);</span><br><span class="line">Visitor.push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.length);</span><br><span class="line">Visitor.push(a, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.length);</span><br><span class="line"></span><br><span class="line">Visitor.pop(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.length);</span><br><span class="line">Visitor.splice(a, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="中介者模式（Mediator）"><a href="#中介者模式（Mediator）" class="headerlink" title="中介者模式（Mediator）"></a>中介者模式（Mediator）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介者模式（Mediator）：通过中介对象封装一系列对象之间的交互，使对象之间不再</span></span><br><span class="line"><span class="comment"> * 相互引用，降低他们之间的耦合。有时中介者对象也可改变对象之间的交互。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中介者对象</span></span><br><span class="line"><span class="keyword">const</span> Mediator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 消息对象</span></span><br><span class="line">  <span class="keyword">const</span> _msg = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅消息方法</span></span><br><span class="line"><span class="comment">     * @param type 消息名称</span></span><br><span class="line"><span class="comment">     * @param action 消息回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    register: <span class="function">(<span class="params">type, action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果该消息存在</span></span><br><span class="line">      <span class="keyword">if</span> (_msg[type]) &#123;</span><br><span class="line">        <span class="comment">// 存入毁掉函数</span></span><br><span class="line">        _msg[type].push(action);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在则建立该消息容器</span></span><br><span class="line">        _msg[type] = [];</span><br><span class="line">        _msg[type].push(action);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布消息方法</span></span><br><span class="line"><span class="comment">     * @param type 消息名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    send: <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果该消息已经被订阅</span></span><br><span class="line">      <span class="keyword">if</span> (_msg[type]) &#123;</span><br><span class="line">        <span class="comment">// 便利已存储的消息毁掉函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> action <span class="keyword">of</span> _msg[type]) &#123;</span><br><span class="line">          <span class="comment">// 执行该毁掉函数</span></span><br><span class="line">          action &amp;&amp; action();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试</span></span><br><span class="line"><span class="comment">// 订阅demo下拍戏 执行毁掉函数00输出 first</span></span><br><span class="line"></span><br><span class="line">Mediator.register(<span class="string">'demo'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'first'</span>));</span><br><span class="line"><span class="comment">// 订阅demo消息 执行毁掉函数--输出second</span></span><br><span class="line">Mediator.register(<span class="string">'demo'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'second'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布demo消息</span></span><br><span class="line">Mediator.send(<span class="string">'demo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显影导航小组件</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; mod 模块</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; tag 处理的标签（消息提醒b，网址span）</span></span><br><span class="line"><span class="comment"> * @param &#123;Boolean|String&#125; showOrHide 显示还是隐藏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> showHideNavWidget = <span class="function"><span class="keyword">function</span>(<span class="params">mod, tag, showOrHide</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取导航模块</span></span><br><span class="line">  <span class="keyword">const</span> modE = <span class="built_in">document</span>.getElementById(mod);</span><br><span class="line">  <span class="comment">// 获取下面的标签名为tag的元素</span></span><br><span class="line">  <span class="keyword">const</span> tagE = mod.getElementsByTagName(tag);</span><br><span class="line">  <span class="comment">// 如果设置为false或者为hide则值为hidden，否则为visible</span></span><br><span class="line">  <span class="keyword">const</span> isShow = (!showOrHide || showOrHide === <span class="string">'hide'</span>) ? <span class="string">'hidden'</span> : <span class="string">'visible'</span>;</span><br><span class="line">  <span class="comment">// 占位隐藏这些标签</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = tag.length; i &gt; <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">    tag.style.visibility = showOrHide;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户收藏导航模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...其他交互逻辑</span></span><br><span class="line">  <span class="comment">// 订阅隐藏用户收藏导航消息提醒消息</span></span><br><span class="line">  Mediator.register(<span class="string">'hideAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'collection_nav'</span>, <span class="string">'b'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 订阅显示用户收藏导航消息提醒消息</span></span><br><span class="line">  Mediator.register(<span class="string">'showAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'collection_nav'</span>, <span class="string">'b'</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 订阅隐藏用户收藏导航网址消息</span></span><br><span class="line">  Mediator.register(<span class="string">'hideAllNavUrl'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'collection_nav'</span>, <span class="string">'span'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 订阅显示用户收藏导航网址消息</span></span><br><span class="line">  Mediator.register(<span class="string">'showAllNavUrl'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'collection_nav'</span>, <span class="string">'span'</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户推荐导航</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...其他交互逻辑</span></span><br><span class="line">  <span class="comment">// 订阅隐藏推荐用户导航消息提醒消息</span></span><br><span class="line">  Mediator.register(<span class="string">'hideAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'recommend_nav'</span>, <span class="string">'b'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 订阅显示推荐用户导航消息提醒消息</span></span><br><span class="line">  Mediator.register(<span class="string">'showAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'recommend_nav'</span>, <span class="string">'b'</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最近常用导航</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...其他交互逻辑</span></span><br><span class="line">  <span class="comment">// 订阅隐藏最近常用导航网址消息</span></span><br><span class="line">  Mediator.register(<span class="string">'hideAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'recently_nav'</span>, <span class="string">'span'</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 订阅显示最近常用导航网址消息</span></span><br><span class="line">  Mediator.register(<span class="string">'showAllNavNum'</span>, () =&gt; &#123;</span><br><span class="line">    showHideNavWidget(<span class="string">'recently_nav'</span>, <span class="string">'span'</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line"><span class="comment">// 设置层模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 消息提醒选框</span></span><br><span class="line">  <span class="keyword">const</span> hideNum = <span class="built_in">document</span>.getElementById(<span class="string">'hide_num'</span>);</span><br><span class="line">  <span class="comment">// 网址选框</span></span><br><span class="line">  <span class="keyword">const</span> hideUrl = <span class="built_in">document</span>.getElementById(<span class="string">'hide_url'</span>);</span><br><span class="line">  <span class="comment">// 消息提醒选框事件</span></span><br><span class="line">  hideNum.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果勾选</span></span><br><span class="line">    <span class="keyword">if</span> (hideNum.checked) &#123;</span><br><span class="line">      <span class="comment">// 中介者发布隐藏消息提醒功能消息</span></span><br><span class="line">      Mediator.send(<span class="string">'hideAllNavNum'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 中介者发布显示消息提醒功能消息</span></span><br><span class="line">      Mediator.send(<span class="string">'showAllNavNum'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 网址选框事件</span></span><br><span class="line">  hideUrl.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果勾选</span></span><br><span class="line">    <span class="keyword">if</span> (hideUrl.checked) &#123;</span><br><span class="line">      <span class="comment">// 中介者发布隐藏所有网址功能消息</span></span><br><span class="line">      Mediator.send(<span class="string">'hideAllNavUrl'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 中介者发布显示所有网址功能消息</span></span><br><span class="line">      Mediator.send(<span class="string">'showAllNavUrl'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="备忘录模式（Memento）"><a href="#备忘录模式（Memento）" class="headerlink" title="备忘录模式（Memento）"></a>备忘录模式（Memento）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备忘录模式（Memento）：在不破坏对象的封装性的前提下，</span></span><br><span class="line"><span class="comment"> * 在对象之外捕获并保存该对象内部的状态以便日后对象使用</span></span><br><span class="line"><span class="comment"> * 或者对象恢复到以前的某个状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPage</span>(<span class="params">page, data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新闻缓存器</span></span><br><span class="line"><span class="comment">// Page备忘录类</span></span><br><span class="line"><span class="keyword">const</span> Page = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 信息缓存对象</span></span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 主函数</span></span><br><span class="line"><span class="comment">   * @param &#123;Number&#125; page 页码</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; fn 成功回调函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">page, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断该页数据是否存在缓存中</span></span><br><span class="line">    <span class="keyword">if</span> (cache[page]) &#123;</span><br><span class="line">      <span class="comment">// 恢复到该页状态，显示该页内容</span></span><br><span class="line">      showPage(page, cache[page]);</span><br><span class="line">      <span class="comment">// 执行成功回调函数</span></span><br><span class="line">      fn &amp;&amp; fn();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 若缓存Cache中无该页数据</span></span><br><span class="line">      $.post(<span class="string">'./data/getNewsData.php'</span>, &#123;</span><br><span class="line">        <span class="comment">// 请求携带数据page页码</span></span><br><span class="line">        page</span><br><span class="line">      &#125;, (res) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 成功返回</span></span><br><span class="line">        <span class="keyword">if</span> (res.errNo === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 显示该页数据</span></span><br><span class="line">          showPage(page, res.data);</span><br><span class="line">          cache[page] = res.data;</span><br><span class="line">          fn &amp;&amp; fn();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="迭代器模式（Iterator）"><a href="#迭代器模式（Iterator）" class="headerlink" title="迭代器模式（Iterator）"></a>迭代器模式（Iterator）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 迭代器模式（Iterator）：在不暴露对象内部结构的同事，可以顺序地访问聚合对象内部的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">const</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params">items, container</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取父容器，若container参数存在，并且可以获取该元素则获取，否则获取document</span></span><br><span class="line">  <span class="keyword">const</span> parent = container &amp;&amp; <span class="built_in">document</span>.getElementById(container) || <span class="built_in">document</span>;</span><br><span class="line">  <span class="comment">// 获取元素</span></span><br><span class="line">  <span class="keyword">const</span> childs = parent.getElementsByTagName(items);</span><br><span class="line">  <span class="comment">// 获取元素长度</span></span><br><span class="line">  <span class="keyword">const</span> length = items.length;</span><br><span class="line">  <span class="comment">// 当前索引值，默认：0</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 缓存源生数组的splice方法</span></span><br><span class="line">  <span class="keyword">const</span> splice = [].splice;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 获取第一个元素</span></span><br><span class="line">    first: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      index = <span class="number">0</span>; <span class="comment">// 矫正当前索引</span></span><br><span class="line">      <span class="keyword">return</span> items[index];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取最后一个元素</span></span><br><span class="line">    second: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      index = length - <span class="number">1</span>; <span class="comment">// 矫正当前索引</span></span><br><span class="line">      <span class="keyword">return</span> items[index];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取前一个元素</span></span><br><span class="line">    pre: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (--index &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果索引值大鱼0</span></span><br><span class="line">        <span class="keyword">return</span> items[index]; <span class="comment">// 获取索引值对应的元素</span></span><br><span class="line">      &#125;</span><br><span class="line">      index = <span class="number">0</span>; <span class="comment">// 索引值为0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 返回空</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取后一个元素</span></span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (++index &lt; length) &#123; <span class="comment">// 如果索引值小鱼长度</span></span><br><span class="line">        <span class="keyword">return</span> items[index]; <span class="comment">// 获取索引值对应的元素</span></span><br><span class="line">      &#125;</span><br><span class="line">      index = length - <span class="number">1</span>; <span class="comment">// 索引值为0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 返回空</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取某一个元素</span></span><br><span class="line">    get: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果num大于等于0再正向获取，否则逆向获取</span></span><br><span class="line">      index = num &gt;= <span class="number">0</span> ? num % length : num % length + length;</span><br><span class="line">      <span class="comment">// 返回对应元素</span></span><br><span class="line">      <span class="keyword">return</span> items[index];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对每一个元素执行某一个方法</span></span><br><span class="line">    dealEcah: <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 第二个参数开始为回调函数中参数</span></span><br><span class="line">      <span class="keyword">const</span> args = splice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 遍历元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">        fn.apply(item, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对某一个元素执行某一个方法</span></span><br><span class="line">    dealItem: <span class="function">(<span class="params">num, fn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 对元素执行回调函数，注：1 第三个参数开始为毁掉函数中参数 2 通过this.get 方法设置index索引值</span></span><br><span class="line">      fn.apply(<span class="keyword">this</span>.get(num), splice.call(<span class="built_in">arguments</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 排他方法处理某一个元素</span></span><br><span class="line">    exclusive: <span class="function">(<span class="params">num, allFn, numFn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 对所有元素执行回调函数</span></span><br><span class="line">      <span class="keyword">this</span>.dealEcah(allFn);</span><br><span class="line">      <span class="comment">// 如果num类型为数组</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(num)) &#123;</span><br><span class="line">        <span class="comment">// 遍历num数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> num) &#123;</span><br><span class="line">          <span class="comment">// 分别处理数组中每一个元素</span></span><br><span class="line">          <span class="keyword">this</span>.dealItem(n, numFn);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dealItem(num, numFn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const demo = new Iterator('li', 'container');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(demo.fisrt()); // &lt;li&gt;1&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// console.log(demo.pre()); // null</span></span><br><span class="line"><span class="comment">// console.log(demo.next()); // &lt;li&gt;2&lt;/li&gt;</span></span><br><span class="line"><span class="comment">// console.log(demo.get(2000)); // &lt;li&gt;1&lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 处理所有元素</span></span><br><span class="line"><span class="comment">// demo.dealEcah(function(text, color) &#123;</span></span><br><span class="line"><span class="comment">//   this.innerHTML = text;</span></span><br><span class="line"><span class="comment">//   this.style.backgroundColor = color;</span></span><br><span class="line"><span class="comment">// &#125;, 'test', 'pink');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 排他思想处理第3个和第4个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo.exclusive([2, 3], function() &#123;</span></span><br><span class="line"><span class="comment">//   this.innerHTML = '被排除的';</span></span><br><span class="line"><span class="comment">//   this.style.backgroundColor = 'green';</span></span><br><span class="line"><span class="comment">// &#125;, function() &#123;</span></span><br><span class="line"><span class="comment">//   this.innerHTML = '选中的';</span></span><br><span class="line"><span class="comment">//   this.style.backgroundColor = 'red';</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组迭代器</span></span><br><span class="line"><span class="comment"> * 依次对数组中每一个元素遍历，并将钙元素的索引于索引值传入回调函数中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eachArray = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="comment">// 遍历数组</span></span><br><span class="line">  <span class="keyword">for</span> (;i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 依次执行回调函数，注意回调函数中传入的参数第一个为索引，第二个为该索引对应的值</span></span><br><span class="line">    <span class="keyword">if</span> (fn.call(arr[i], i, arr[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象迭代器</span></span><br><span class="line"><span class="comment"> * 对象迭代器于与数组迭代器比较类似，但传入回调函数中的为对象的属性与对象的属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eachObject = <span class="function">(<span class="params">obj, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 遍历对象中的每一个属性值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="comment">// 依次执行回调函数，注意回调函数中传入的参数第一个为属性，第二个为该属性对应的值</span></span><br><span class="line">      <span class="keyword">if</span> (fn.call(obj[key], key, obj[key]) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>).map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">eachArray(arr, (i, data) =&gt; <span class="built_in">console</span>.log(i, data));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">23</span>, <span class="attr">b</span>: <span class="number">56</span>, <span class="attr">c</span>: <span class="number">67</span> &#125;;</span><br><span class="line">eachObject(obj, (i, data) =&gt; <span class="built_in">console</span>.log(i, data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步变量</span></span><br><span class="line"><span class="keyword">const</span> A = &#123;</span><br><span class="line">  <span class="comment">// 所有用户共有</span></span><br><span class="line">  common: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 客户端数据</span></span><br><span class="line">  client: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      username: <span class="string">'桂仁沛'</span>,</span><br><span class="line">      uid: <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  server: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要获取客户端（client）的用户名（username）数据可以通过一个同步变量迭代取值器来实现</span></span><br><span class="line"><span class="comment">// 同步变量迭代取值器</span></span><br><span class="line"><span class="keyword">const</span> AGetter = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果不存在A则返回未定义</span></span><br><span class="line">  <span class="keyword">if</span> (!A) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = A; <span class="comment">// 获取同步变量A对象</span></span><br><span class="line">  <span class="keyword">const</span> keyI = key.split(<span class="string">'.'</span>); <span class="comment">// 解析属性层次序列</span></span><br><span class="line">  <span class="comment">// 迭代同步变量A对象属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = keyI.length; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果第i层属性存在对应的值则迭代该属性值</span></span><br><span class="line">    <span class="keyword">if</span> (result[keyI[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      result = result[keyI[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户名数据</span></span><br><span class="line"><span class="built_in">console</span>.log(AGetter(<span class="string">'client.user.username'</span>));</span><br><span class="line"><span class="comment">// 获取本地语言数据</span></span><br><span class="line"><span class="built_in">console</span>.log(AGetter(<span class="string">'client.lang.local'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时在交互中会修改或者增加一些同步变量属性数据，比如我们缓存用户在主页中添加体育新闻</span></span><br><span class="line"><span class="comment">// 模块这一动作数据，我们可以通过同步变量迭代赋值器来实现</span></span><br><span class="line"><span class="comment">// 同步变量迭代赋值器</span></span><br><span class="line"><span class="keyword">const</span> ASetter = <span class="function">(<span class="params">key, val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果不存在A则返回未定义</span></span><br><span class="line">  <span class="keyword">if</span> (!A) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = A; <span class="comment">// 获取同步变量A对象</span></span><br><span class="line">  <span class="keyword">const</span> keyI = key.split(<span class="string">'.'</span>); <span class="comment">// 解析属性层次序列</span></span><br><span class="line">  <span class="comment">// 迭代同步变量A对象属性</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> len = keyI.length; i &lt; len - <span class="number">1</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果第i层属性对应的值不存在，则定义为对象</span></span><br><span class="line">    <span class="keyword">if</span> (result[keyI[i]] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      result[keyI[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果第i层属性对应的值不是对象（Object）的一个实例，则抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (!(result[keyI[i]] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`A.<span class="subst">$&#123;keyI.splice(<span class="number">0</span>, i + <span class="number">1</span>).join(<span class="string">'.'</span>)&#125;</span> is not Object`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 迭代盖层属性值</span></span><br><span class="line">    result = result[keyI[i]];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result[keyI[i]] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ASetter(<span class="string">'client.module.news.sports'</span>, <span class="string">'on'</span>));</span><br><span class="line"><span class="comment">// console.log(ASetter('client.user.username.sports', 'on'));</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于绘制特效图片方法dealImage在处理图片数据时需要两个步骤，第一步是迭代每一个图片像素数据</span></span><br><span class="line"><span class="comment"> * 第二部是根据给定特效类型选择不同算法处理像素数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制特效图片</span></span><br><span class="line"><span class="comment"> * @param t 特效类型</span></span><br><span class="line"><span class="comment"> * @param x x坐标</span></span><br><span class="line"><span class="comment"> * @param y y坐标</span></span><br><span class="line"><span class="comment"> * @param w 宽度</span></span><br><span class="line"><span class="comment"> * @param h 高度</span></span><br><span class="line"><span class="comment"> * @param a 透明度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function drawImage(t, x, y, w, h, a) &#123;</span></span><br><span class="line"><span class="comment">//   // 获取画布图片数据</span></span><br><span class="line"><span class="comment">//   let ctx = &#123;&#125;;</span></span><br><span class="line"><span class="comment">//   const canvasData = ctx.getImageData(x, y, w, h);</span></span><br><span class="line"><span class="comment">//   // 获取像素数据</span></span><br><span class="line"><span class="comment">//   const data = canvasData.data;</span></span><br><span class="line"><span class="comment">//   // 遍历没注意像素数据（4个数据表示一个像素点数据，分别代表红色、绿色、蓝色、透明度）</span></span><br><span class="line"><span class="comment">//   for (let i = 0, len = data.length; i &lt; len; i += 4) &#123;</span></span><br><span class="line"><span class="comment">//     switch (t) &#123;</span></span><br><span class="line"><span class="comment">//       // 红色滤镜，将绿色与蓝色取值为0</span></span><br><span class="line"><span class="comment">//       case 'red':</span></span><br><span class="line"><span class="comment">//         data[i + 1] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 2] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 3] = a;</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//       // 绿色滤镜，将红色与蓝色取值为0</span></span><br><span class="line"><span class="comment">//       case 'green':</span></span><br><span class="line"><span class="comment">//         data[i] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 2] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 3] = a;</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//       // 蓝色滤镜，将绿色与红色取值为0</span></span><br><span class="line"><span class="comment">//       case 'blue':</span></span><br><span class="line"><span class="comment">//         data[i] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 1] = 0;</span></span><br><span class="line"><span class="comment">//         data[i + 3] = a;</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//       // 平均值灰色滤镜，去三色平均值</span></span><br><span class="line"><span class="comment">//       case 'gray': &#123;</span></span><br><span class="line"><span class="comment">//         const num = parseInt((data[i] + data[i + 1] + data[i + 2]) / 3, 10);</span></span><br><span class="line"><span class="comment">//         data[i] = num;</span></span><br><span class="line"><span class="comment">//         data[i + 1] = num;</span></span><br><span class="line"><span class="comment">//         data[i + 2] = num;</span></span><br><span class="line"><span class="comment">//         data[i + 3] = a;</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//       default:</span></span><br><span class="line"><span class="comment">//         break;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   // ctx.putImageData(canvasData, width + x, y);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 然而这种处理逻辑并不是最优的，因为每一次遍历都需要进行一次分支判断，</span></span><br><span class="line"><span class="comment"> * 有太多的无用分支判断</span></span><br><span class="line"><span class="comment"> * 可以将循环遍历抽象出来作为一个迭代器存在，每次循环都执行传入迭代器中的某一固定算法，而对于特效算法我们可以上设置在策略对象</span></span><br><span class="line"><span class="comment"> * 中实现，通过策略模式与迭代器模式的综合运用即可解决上述分支判断问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制特效图片</span></span><br><span class="line"><span class="comment"> * @param t 特效类型</span></span><br><span class="line"><span class="comment"> * @param x x坐标</span></span><br><span class="line"><span class="comment"> * @param y y坐标</span></span><br><span class="line"><span class="comment"> * @param w 宽度</span></span><br><span class="line"><span class="comment"> * @param h 高度</span></span><br><span class="line"><span class="comment"> * @param a 透明度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawImage</span>(<span class="params">t, x, y, w, h, a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> canvasData = ctx.getImageData(x, y, w, h);</span><br><span class="line">  <span class="keyword">const</span> data = canvasData.data;</span><br><span class="line">  <span class="comment">// 状态模式封装算法</span></span><br><span class="line">  <span class="keyword">const</span> Deal = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = &#123;</span><br><span class="line">      <span class="comment">// 默认类型--平均灰度特效</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function">(<span class="params">i</span>) =&gt;</span> method[<span class="string">'gray'</span>](i),</span><br><span class="line">      <span class="comment">//         data[i + 1] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 2] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 3] = a;</span></span><br><span class="line">      <span class="comment">//         break;</span></span><br><span class="line">      <span class="comment">//       // 绿色滤镜，将红色与蓝色取值为0</span></span><br><span class="line">      <span class="comment">//       case 'green':</span></span><br><span class="line">      <span class="comment">//         data[i] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 2] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 3] = a;</span></span><br><span class="line">      <span class="comment">//         break;</span></span><br><span class="line">      <span class="comment">//       // 蓝色滤镜，将绿色与红色取值为0</span></span><br><span class="line">      <span class="comment">//       case 'blue':</span></span><br><span class="line">      <span class="comment">//         data[i] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 1] = 0;</span></span><br><span class="line">      <span class="comment">//         data[i + 3] = a;</span></span><br><span class="line">      <span class="comment">//         break;</span></span><br><span class="line">      <span class="comment">//       // 平均值灰色滤镜，去三色平均值</span></span><br><span class="line">      <span class="comment">//       case 'gray': &#123;</span></span><br><span class="line">      <span class="comment">//         const num = parseInt((data[i] + data[i + 1] + data[i + 2]) / 3, 10);</span></span><br><span class="line">      <span class="comment">//         data[i] = num;</span></span><br><span class="line">      <span class="comment">//         data[i + 1] = num;</span></span><br><span class="line">      <span class="comment">//         data[i + 2] = num;</span></span><br><span class="line">      <span class="comment">//         data[i + 3] = a;</span></span><br><span class="line">      <span class="comment">//         break;</span></span><br><span class="line">      <span class="comment">// 红色特效</span></span><br><span class="line">      red: <span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        data[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        data[i + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        data[i + <span class="number">3</span>] = a;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 平均灰度特效</span></span><br><span class="line">      gray: <span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        data[i] = data[i + <span class="number">1</span>] = <span class="built_in">parseInt</span>(data[i + <span class="number">2</span>] = data[i] + data[i + <span class="number">1</span>] + data[i + <span class="number">2</span>] / <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">        data[i + <span class="number">3</span>] = a;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 蓝色特效</span></span><br><span class="line">      <span class="comment">// 绿色特效</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">type</span>) =&gt;</span> method[type] || method[<span class="string">'default'</span>];</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="comment">// 迭代器处理数据</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eachData</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = data.length; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理一组像素数据</span></span><br><span class="line">      fn(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">  eachData(Deal(t));</span><br><span class="line">  <span class="comment">// ctx.putImageData(canvasData, width + x, y);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释器模式（Interpreter）"><a href="#解释器模式（Interpreter）" class="headerlink" title="解释器模式（Interpreter）"></a>解释器模式（Interpreter）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解释器模式（Interpreter）：对于一种语言，给出其文法表示形式，并定义一种解释，器</span></span><br><span class="line"><span class="comment"> * 通过使用这种解释器来解释语言中定义的句子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计元素路径Xpath 例如：DIV&gt;DIV2&gt;SPAN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// XPath解释器</span></span><br><span class="line"><span class="keyword">const</span> Interpreter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取兄弟元素名称</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSublingName</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果存在兄弟元素</span></span><br><span class="line">    <span class="keyword">if</span> (node.previousSibling) &#123;</span><br><span class="line">      <span class="keyword">let</span> name = <span class="string">''</span>; <span class="comment">// 返回兄弟元素名称字符串</span></span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">1</span>; <span class="comment">// 紧邻兄弟元素中相同名称元素个数</span></span><br><span class="line">      <span class="keyword">let</span> nodeName = node.nodeName; <span class="comment">// 原始节点名称</span></span><br><span class="line">      <span class="keyword">let</span> sibling = node.previousSibling; <span class="comment">// 前一个兄弟元素</span></span><br><span class="line">      <span class="comment">// 如果存在前一个兄弟元素</span></span><br><span class="line">      <span class="keyword">while</span> (sibling) &#123;</span><br><span class="line">        <span class="comment">// 如果节点为元素 并且节点类型与前一个兄弟元素类型相同，并且前一个兄弟元素名称存在</span></span><br><span class="line">        <span class="keyword">if</span> (sibling.nodeType === <span class="number">1</span> &amp;&amp; sibling.nodeType === node.nodeType &amp;&amp; sibling.nodeName) &#123;</span><br><span class="line">          <span class="comment">// 如果节点名称和前一个兄弟元素名称相同</span></span><br><span class="line">          <span class="keyword">if</span> (nodeName === sibling.nodeName) &#123;</span><br><span class="line">            <span class="comment">// 如果节点名称和前一个兄弟元素名称相同</span></span><br><span class="line">            <span class="keyword">if</span> (nodeName === sibling.nodeName) &#123;</span><br><span class="line">              <span class="comment">// 节点名称后面添加计数</span></span><br><span class="line">              name += ++count;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 重置相同紧邻节点名称节点个数</span></span><br><span class="line">              count = <span class="number">1</span>;</span><br><span class="line">              <span class="comment">// 追加新的节点名称</span></span><br><span class="line">              name += <span class="string">`|<span class="subst">$&#123;sibling.nodeName.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向前获取前一个兄弟元素</span></span><br><span class="line">        sibling = sibling.previousSibling;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则不存在兄弟元素返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取XPath方法</span></span><br><span class="line"><span class="comment">   * @param node 目标节点</span></span><br><span class="line"><span class="comment">   * @param wrap 容器节点 // 如果不存在容器节点，默认为document</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">getPath</span>(<span class="params">node, wrap = document</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 路径数组</span></span><br><span class="line">    <span class="keyword">let</span> path = [];</span><br><span class="line">    <span class="comment">// 如果当前（目标节点等于容器节点</span></span><br><span class="line">    <span class="keyword">if</span> (node === wrap) &#123;</span><br><span class="line">      <span class="comment">// 容器节点为元素</span></span><br><span class="line">      <span class="keyword">if</span> (wrap.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 路径数组中输入容器节点名称</span></span><br><span class="line">        path.push(wrap.nodeName.toUpperCase());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前节点的父节点不等于容器节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.parentNode !== wrap) &#123;</span><br><span class="line">      <span class="comment">// 对当前节点的父节点执行遍历操作</span></span><br><span class="line">      path = getPath(node.parentNode, wrap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果当前节点的父元素与容器节点相等</span></span><br><span class="line">      <span class="comment">// 容器节点微元素</span></span><br><span class="line">      <span class="keyword">if</span> (wrap.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 路径数组中输入容器节点名称</span></span><br><span class="line">        path.push(wrap.nodeName.toUpperCase());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取元素的兄弟元素名称统计</span></span><br><span class="line">    <span class="keyword">const</span> sublingsNames = getSublingName(node);</span><br><span class="line">    <span class="comment">// 如果节点为元素</span></span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 输入当前节点元素名称及其前面兄弟元素名称统计</span></span><br><span class="line">      path.push(node.nodeName.toUpperCase() + sublingsNames);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = Interpreter(<span class="built_in">document</span>.getElementById(<span class="string">'span7'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(path.join(<span class="string">'&gt;'</span>));</span><br></pre></td></tr></table></figure><p><code>本文所有相关内容均来自于张容铭作者的Javascript设计模式，只供学习所用，切勿转载。如有侵权，请联系我，我会立即删除</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计&quot;&gt;&lt;a href=&quot;#结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计&quot; class=&quot;headerlink&quot; title=&quot;结构型设计模式关注于如何将类或对象组合成更大
      
    
    </summary>
    
    
      <category term="javascript design" scheme="http://blog.xutengfeng.com/tags/javascript-design/"/>
    
  </entry>
  
  <entry>
    <title>Array.prototype.find() not work in IE</title>
    <link href="http://blog.xutengfeng.com/2018/07/13/Array-prototype-find-not-work-in-IE/"/>
    <id>http://blog.xutengfeng.com/2018/07/13/Array-prototype-find-not-work-in-IE/</id>
    <published>2018-07-13T08:11:39.000Z</published>
    <updated>2018-07-13T08:21:21.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在修复一个windows版本的微信客户端打开公众号网页的时候碰到的一个问题。</span><br><span class="line">在排查完问题之后，发现这样一幅图</span><br></pre></td></tr></table></figure><p><img src="http://gufeng.xutengfeng.com/blog/WechatIMG129.jpeg" alt="find兼容浏览器图" title="find兼容浏览器图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>结构型模式</title>
    <link href="http://blog.xutengfeng.com/2018/07/10/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.xutengfeng.com/2018/07/10/结构型模式/</id>
    <published>2018-07-10T03:38:23.000Z</published>
    <updated>2018-07-25T15:04:22.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计"><a href="#结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计" class="headerlink" title="结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计"></a>结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计</h3><ul><li>外观模式（Facade Pattern）</li><li>适配器模式（Adapter Pattern）</li><li>代理模式（Proxy Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>组合模式（Composite Pattern）</li><li>享元模式（Flyweight Pattern）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观模式（Facade）：为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得</span></span><br><span class="line"><span class="comment"> * 对子系统接口的访问更容易。在Javascript中有时也会用于对底层结构兼容性做同意封装来简化</span></span><br><span class="line"><span class="comment"> * 用户使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 外观模式实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">dom, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对于支持DOM2级时间处理程序addEventListener方法的浏览器</span></span><br><span class="line">  <span class="keyword">if</span> (dom.addEventListener) &#123;</span><br><span class="line">    dom.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 对于不支持addEventListener方法但支持attachEvent方法的浏览器</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dom.attachEvent) &#123;</span><br><span class="line">    dom.attach(<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>, fn);</span><br><span class="line">    <span class="comment">// 对于不支持addEventListener方法也不支持attachEven，但支持on+事件的浏览器</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dom[<span class="string">`on<span class="subst">$&#123;type&#125;</span>`</span>] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取事件对象</span></span><br><span class="line"><span class="comment">* @param &#123;Object&#125; event 事件对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEvent</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 标准浏览器返回event，IE下window.event</span></span><br><span class="line">  <span class="keyword">return</span> event || <span class="built_in">window</span>.event;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取元素</span></span><br><span class="line"><span class="comment">* @param &#123;Object&#125; event 事件对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTarget</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> event = getEvent(e);</span><br><span class="line">  <span class="comment">// 标准浏览器下event.target, IE下event.srcElement</span></span><br><span class="line">  <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 阻止默认行为</span></span><br><span class="line"><span class="comment">* @param &#123;Object&#125; e 事件对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventDefault</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> event = getEvent(e);</span><br><span class="line">  <span class="comment">// 标准浏览器</span></span><br><span class="line">  <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="comment">// IE浏览器</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    event.returnValue = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 适配器模式（Adapter）：将一个类（对象）的接口（方法或属性转化成另外一个接口，</span></span><br><span class="line"><span class="comment">* 以满足用户需求，使类（对象）之间接口的不兼容问题通过适配器得以解决</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数适配器</span></span><br><span class="line"><span class="comment">// 如果一个函数的参数很多的话，我们要记住它们的顺序是很难的。所以一般是以一个参数对象方式传入的</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* obj.name: name</span></span><br><span class="line"><span class="comment">* obj.title: title</span></span><br><span class="line"><span class="comment">* ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _adapter = &#123;</span><br><span class="line">    name: <span class="string">'雨夜清河'</span>,</span><br><span class="line">    title: <span class="string">'设计模式'</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    color: <span class="string">'pink'</span>,</span><br><span class="line">    size: <span class="number">100</span>,</span><br><span class="line">    prize: <span class="number">50</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _adapter) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_adapter.hasOwnProperty(key)) &#123;</span><br><span class="line">      _adapter[key] = obj[key] || _adapter[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据适配</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'Javascript'</span>, <span class="string">'book'</span>, <span class="string">'前端编程语言'</span>, <span class="string">'8月1日'</span>];</span><br><span class="line"><span class="comment">// 数组中的每个成员代表的意义不同，所以这种数据结构语义不好，所以通常会将其适配成对象形式，比如下面的</span></span><br><span class="line"><span class="comment">// 这种对象数据结构</span></span><br><span class="line"><span class="keyword">const</span> arrToObjAdapter = <span class="function">(<span class="params">arr</span>) =&gt;</span> (&#123;</span><br><span class="line">  name: arr[<span class="number">0</span>],</span><br><span class="line">  type: arr[<span class="number">1</span>],</span><br><span class="line">  title: arr[<span class="number">2</span>],</span><br><span class="line">  data: arr[<span class="number">3</span>],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> adapterData = arrToObjAdapter(arr);</span><br><span class="line"><span class="built_in">console</span>.log(&#123; adapterData &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端数据适配</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 如果后端的数据经常变化，比如在某些网站拉取的新闻数据，后端有时无法控制数据的格式，我们在调用dosomething方法时，最好不要直接调用，</span></span><br><span class="line"><span class="comment">* 最好现将传递过来的数据是配成对我们可用的数据再使用，这样更安全</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ajaxAdapter = <span class="function">(<span class="params">data</span>) =&gt;</span> [data[<span class="string">'key1'</span>], data[<span class="string">'key2'</span>], data[<span class="string">'key3'</span>]];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰者模式（Decorator）：在不改变原对象的基础上，通过对其包装拓展（添加属性或方法）</span></span><br><span class="line"><span class="comment"> * 使原有对象可以满足用户的更复杂需求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰已有的功能对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者</span></span><br><span class="line"><span class="keyword">const</span> decorator = <span class="function">(<span class="params">dom, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取事件源</span></span><br><span class="line">  <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(dom);</span><br><span class="line">  <span class="comment">// 若事件源已经绑定事件</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> input.onclick === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// 缓存事件源原有绑定事件</span></span><br><span class="line">    <span class="keyword">const</span> oldClickFn = input.onclick;</span><br><span class="line">    <span class="comment">// 为事件源定义新的事件</span></span><br><span class="line">    input.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 事件源原有回调函数</span></span><br><span class="line">      oldClickFn();</span><br><span class="line">      <span class="comment">// 执行事件源新增回调函数</span></span><br><span class="line">      fn();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 事件源未绑定事件，直接为事件源添加新增回调函数</span></span><br><span class="line">    input.onclick = fn;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桥接模式（Bridge）：在系统沿着多个维度变化的同事，又不增减其复杂度并已达到解耦。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取共同点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params">dom, color, bg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置元素的字体颜色</span></span><br><span class="line">  dom.style.color = color;</span><br><span class="line">  <span class="comment">// 设置元素的背景颜色</span></span><br><span class="line">  dom.style.background = bg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 事件与业务逻辑之间的桥梁</span></span><br><span class="line"><span class="keyword">const</span> spans = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'span'</span>);</span><br><span class="line">spans[<span class="number">0</span>].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  changeColor(<span class="keyword">this</span>, <span class="string">'red'</span>, <span class="string">'#ddd'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// changeColor方法中的dom实质上是事件回调函数中的this，那么想要接触它们之间的耦合，</span></span><br><span class="line"><span class="comment">// 我们就需要一个桥接方法--匿名回调函数。通过这个回调函数，我们将获取到的this传递到</span></span><br><span class="line"><span class="comment">// changeColor函数中，即可实现需求。</span></span><br><span class="line"><span class="comment">// 同样对于用户名模块的鼠标移开事件用同样的方式即可</span></span><br><span class="line">spans[<span class="number">0</span>].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  changeColor(<span class="keyword">this</span>, <span class="string">'#333'</span>, <span class="string">'#F5F5F5'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多元化对象</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桥接模式的强大之处不仅仅在此，甚至对于多为的变化也同样适用。比如我们书写一个canvas跑步游戏</span></span><br><span class="line"><span class="comment"> * 的时候，对于游戏中的人、小精灵、小球等一系列的实物都有动作单元，而他们的每个动作实现起来方式</span></span><br><span class="line"><span class="comment"> * 又是同意的，比如人和精灵和球的运动其实就是位置x和y的变化，球的颜色与精灵的色彩的绘制方式都类似等</span></span><br><span class="line"><span class="comment"> * 这样我们就可已经这些多为变化部分，提取出来作为一个抽象运动单元进行保存，而当我们创建实体时，</span></span><br><span class="line"><span class="comment"> * 将需要的每个抽象动作单元通过桥接，链接在一起运作。这样它们之间不会相互影响并且该方式降低了</span></span><br><span class="line"><span class="comment"> * 它们之间的耦合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维变量类</span></span><br><span class="line"><span class="comment">// 运动单元</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Speed</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Speed.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'运动起来！'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 着色单元</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params">cl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = cl;</span><br><span class="line">&#125;</span><br><span class="line">Color.prototype.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'绘制色彩'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变形单元</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">sp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.shape = sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape.prototype.change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'改变形状'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说话单元</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Speek</span>(<span class="params">wd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.word = wd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Speek.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'书写字体'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 于是我们想创建一个球类，并且它可以运动，可以着色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span>(<span class="params">x, y, c</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实现运动单元</span></span><br><span class="line">  <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y);</span><br><span class="line">  <span class="comment">// 实现着色单元</span></span><br><span class="line">  <span class="keyword">this</span>.color = <span class="keyword">new</span> Color(c);</span><br><span class="line">&#125;</span><br><span class="line">Ball.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实现运动</span></span><br><span class="line">  <span class="keyword">this</span>.speed.run();</span><br><span class="line">  <span class="comment">// 实现着色</span></span><br><span class="line">  <span class="keyword">this</span>.color.draw();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样我们想创建一个人物类，他可以运动以及说话</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">x, y, f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y);</span><br><span class="line">  <span class="keyword">this</span>.font = <span class="keyword">new</span> Speek(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed.run();</span><br><span class="line">  <span class="keyword">this</span>.font.say();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然我们也可以创建一个精灵类，让它可以运动可以着色可以改变形状</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Spirite</span>(<span class="params">x, y, c, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y);</span><br><span class="line">  <span class="keyword">this</span>.color = <span class="keyword">new</span> Color(c);</span><br><span class="line">  <span class="keyword">this</span>.shape = <span class="keyword">new</span> Shape(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Spirite.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed.run();</span><br><span class="line">  <span class="keyword">this</span>.color.draw();</span><br><span class="line">  <span class="keyword">this</span>.shape.change();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象桥接method，实现为对象拓展方法的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个method方法去定义新方法</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.prototype[name] = func;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5.1 伪类</span></span><br><span class="line"><span class="comment"> * 当一个函数对象被创建时，Function构造器产生的函数对象会运行</span></span><br><span class="line"><span class="comment"> * 类似这样的一些代码</span></span><br><span class="line"><span class="comment"> * this.prototype = &#123; constructor: this &#125;</span></span><br><span class="line"><span class="comment"> * 新函数对象被赋予一个prototype属性，其值时一个包含一个constructor属性</span></span><br><span class="line"><span class="comment"> * 且属性值为该型函数对象。该prototype对象是存放继承特征的地方。</span></span><br><span class="line"><span class="comment"> * 因为Javascript语言没有提供一种方法去确定哪个函数是打算用来作构造器的，</span></span><br><span class="line"><span class="comment"> * 所以每个函数都会得到一个prototype对象。constructor属性没什么用，重要的是prototype对象</span></span><br><span class="line"><span class="comment"> * 但伪类有这么几个缺点</span></span><br><span class="line"><span class="comment"> * 1.没有私有环境，所有属性都是公开的</span></span><br><span class="line"><span class="comment"> * 2.无法访问super(父类)的方法</span></span><br><span class="line"><span class="comment"> * 3.如果你在调用构造器时忘记使用new了，危害相当大！所以建议构造器用大写字母开头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 当采用构造器调用模式，即使用new前缀去调用一个函数时，这将修改函数执行的方式。</span></span><br><span class="line"><span class="comment">// 如果new运算符石一个方法而不是一个运算符，它可能会想这样执行</span></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个新对象，它继承自构造器函数的原型对象</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">Object</span>.beget(<span class="keyword">this</span>.prototype);</span><br><span class="line">  <span class="comment">// 调用构造器函数，绑定到-this-到新对象上</span></span><br><span class="line">  <span class="keyword">const</span> other = <span class="keyword">this</span>.apply(that, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// 如果它的返回值不是一个对象就返回该新对象</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> other === <span class="string">'object'</span> &amp;&amp; other) || that;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义一个构造器并扩充它的原型</span></span><br><span class="line"><span class="keyword">const</span> Mammal = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Mammal.prototype.get_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">Mammal.prototype.says = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.saying || <span class="string">''</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 现在，可以构造一个实例</span></span><br><span class="line"><span class="keyword">const</span> myMammal = <span class="keyword">new</span> Mammal(<span class="string">'Herb the Mammal'</span>);</span><br><span class="line"><span class="keyword">const</span> name = myMammal.get_name();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span>, name);</span><br><span class="line"><span class="comment">// 我们可以构造另一个味蕾来继承Mammal，这是通过定义它的constructor函数</span></span><br><span class="line"><span class="comment">// 并替换它的prototype为一个Mammal的实例来实现的</span></span><br><span class="line"><span class="keyword">const</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.saying = <span class="string">'meow'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 替换Cat.prototype为一个新的Mammal实例</span></span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Mammal();</span><br><span class="line"><span class="comment">// 扩充新原型对象，增加purr和get_name方法</span></span><br><span class="line">Cat.prototype.purr = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s) &#123;</span><br><span class="line">      s += <span class="string">'r'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s += <span class="string">'r'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;;</span><br><span class="line">Cat.prototype.get_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.says()&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.says()&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Henrietta'</span>);</span><br><span class="line"><span class="keyword">const</span> says = myCat.says();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'says'</span>, says);</span><br><span class="line"><span class="keyword">const</span> purr = myCat.purr(<span class="string">'5'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'purr'</span>, purr);</span><br><span class="line"><span class="keyword">const</span> name1 = myCat.get_name();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name1'</span>, name1);</span><br><span class="line"><span class="comment">// 伪类模式本意是想向面向对象靠拢，但它看起来格格不入。</span></span><br><span class="line"><span class="comment">// 我们可以隐藏一些丑陋的细节。</span></span><br><span class="line"><span class="comment">// 这是通过使用method方法定义一个inherits方法来实现的</span></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">'inherits'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这样inherits和method方法都返回this，这将允许我们可以以</span></span><br><span class="line"><span class="comment">// 级联的样式变成。现在用遗憾语句构造我们的Mouse</span></span><br><span class="line"><span class="keyword">let</span> Mouse = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.saying = <span class="string">'meow'</span>;</span><br><span class="line">&#125;.inherits(Mammal)</span><br><span class="line">  .method(<span class="string">'purr'</span>, (n) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> i;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s) &#123;</span><br><span class="line">        s += <span class="string">'r'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      s += <span class="string">'r'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;).method(<span class="string">'get_name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.says()&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.says()&#125;</span>`</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合模式（Composite）：又称部分-整体模式，将对象组合成树形结构以表示“部分整体”的层次结构。</span></span><br><span class="line"><span class="comment"> * 组合模式使得用户对单个对象和组合对象的使用具有一致性。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个过渡函数对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 过渡对象的原型继承父对象</span></span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="comment">// 返回过渡对象的一个实例，该实例的原型继承了父对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inheritPrototype = <span class="function"><span class="keyword">function</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 复制一份父类的原型副本保存在变量中</span></span><br><span class="line">  <span class="keyword">const</span> p = inheritObject(superClass.prototype);</span><br><span class="line">  <span class="comment">// 修正因为重写子类原型导致子类的constructor属性被修改</span></span><br><span class="line">  p.constructor = subClass;</span><br><span class="line">  subClass.prototype = p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个成员都要有祖先</span></span><br><span class="line"><span class="keyword">const</span> News = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 子组件容器</span></span><br><span class="line">  <span class="keyword">this</span>.children = [];</span><br><span class="line">  <span class="comment">// 当前组件元素</span></span><br><span class="line">  <span class="keyword">this</span>.element = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">News.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请重写你的方法'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  add: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请重写你的方法'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  getElement: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请重写你的方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器类构造函数</span></span><br><span class="line"><span class="keyword">const</span> Container = <span class="function"><span class="keyword">function</span>(<span class="params">id, parent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数继承父类</span></span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 模块id</span></span><br><span class="line">  <span class="keyword">this</span>.id = id;</span><br><span class="line">  <span class="comment">// 模块的父容器</span></span><br><span class="line">  <span class="keyword">this</span>.parent = parent;</span><br><span class="line">  <span class="comment">// 构建方法</span></span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寄生式继承父类原型方法</span></span><br><span class="line">inheritPrototype(Container, News);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建方法</span></span><br><span class="line">Container.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line">  <span class="keyword">this</span>.element.id = <span class="keyword">this</span>.id;</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'new-container'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加子元素方法</span></span><br><span class="line">Container.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在子元素容器中插入子元素</span></span><br><span class="line">  <span class="keyword">this</span>.children.push(child);</span><br><span class="line">  <span class="comment">// 插入当前组件元素树中</span></span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取当前元素方法</span></span><br><span class="line">Container.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 显示方法</span></span><br><span class="line">Container.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.parent.appendChild(<span class="keyword">this</span>.element);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样的，下一层级的行成员集合类以及后面的新闻组合体类实现的方法与之类似</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; classname 类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> Item = <span class="function"><span class="keyword">function</span>(<span class="params">classname = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.classname = classname;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Item, News);</span><br><span class="line">Item.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="keyword">this</span>.classname;</span><br><span class="line">&#125;;</span><br><span class="line">Item.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在子元素容器中插入元素</span></span><br><span class="line">  <span class="keyword">this</span>.children.push(child);</span><br><span class="line">  <span class="comment">// 插入当前组件元素树中</span></span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Item.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; classname 类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> NewsGroup = <span class="function"><span class="keyword">function</span>(<span class="params">classname = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.classname = classname;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inheritPrototype(NewsGroup, News);</span><br><span class="line">NewsGroup.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="keyword">this</span>.classname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NewsGroup.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在子元素中插入子元素</span></span><br><span class="line">  <span class="keyword">this</span>.children.push(child);</span><br><span class="line">  <span class="comment">// 插入当前组件元素树中</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line">NewsGroup.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新闻类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要更底层的新闻类，但是注意这些新闻成员类是不能拥有子成员的，但是他们继承了</span></span><br><span class="line"><span class="comment"> * 父类，所有对于add方法最好声明一下，比如创建图片新闻类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> ImageNews = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; url = <span class="string">''</span>, href = <span class="string">'#'</span>, classname = <span class="string">'normal'</span> &#125;</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.url = url;</span><br><span class="line">  <span class="keyword">this</span>.href = href;</span><br><span class="line">  <span class="keyword">this</span>.classname = classname;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inheritPrototype(ImageNews, News);</span><br><span class="line">ImageNews.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = <span class="keyword">this</span>.url;</span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(img);</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">`image-news <span class="subst">$&#123;<span class="keyword">this</span>.classname&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ImageNews.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">ImageNews.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新闻类</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; &#123; text, href, type &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> IconNews = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; text = <span class="string">''</span>, href = <span class="string">'#'</span>, type = <span class="string">'video'</span> &#125;</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.text = text;</span><br><span class="line">  <span class="keyword">this</span>.href = href;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line">inheritPrototype(IconNews, News);</span><br><span class="line">IconNews.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.text;</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href;</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">`icon <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line">IconNews.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">IconNews.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.element);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; &#123; text, href &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> EasyNews = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; text = <span class="string">''</span>, href = <span class="string">'#'</span> &#125;</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.text = text;</span><br><span class="line">  <span class="keyword">this</span>.href = href;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inheritPrototype(EasyNews, News);</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.text;</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href;</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'text'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; &#123; text, href, type, pos &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> TypeNews = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; text = <span class="string">''</span>, href = <span class="string">'#'</span>, type = <span class="string">''</span>, pos = <span class="string">'left'</span> &#125;</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.text = text;</span><br><span class="line">  <span class="keyword">this</span>.href = href;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.pos = pos;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inheritPrototype(TypeNews, News);</span><br><span class="line"></span><br><span class="line">TypeNews.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.pos === <span class="string">'left'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element.innerHTML = <span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span>] <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.element.innerHTML = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span> [<span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href;</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'text'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TypeNews.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">TypeNews.prototype.getElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新闻模块</span></span><br><span class="line"><span class="keyword">const</span> news = <span class="keyword">new</span> Container(<span class="string">'news'</span>, <span class="built_in">document</span>.body);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  news.add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>).add(</span><br><span class="line">      <span class="keyword">new</span> IconNews(&#123; <span class="attr">text</span>: <span class="string">'梅西不拿金球也伟大'</span>, <span class="attr">href</span>: <span class="string">'#'</span>, <span class="attr">type</span>: <span class="string">'video'</span> &#125;)</span><br><span class="line">    )</span><br><span class="line">  ).add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>).add(</span><br><span class="line">      <span class="keyword">new</span> NewsGroup(<span class="string">'has-img'</span>).add(</span><br><span class="line">        <span class="keyword">new</span> ImageNews(&#123;</span><br><span class="line">          url: <span class="string">'https://gw.alipayobjects.com/zos/rmsportal/BiazfanxmamNRoxxVxka.png'</span>,</span><br><span class="line">          classname: <span class="string">'small'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ).add(</span><br><span class="line">        <span class="keyword">new</span> EasyNews(&#123; <span class="attr">text</span>: <span class="string">'从240斤胖子成功变型男'</span> &#125;)</span><br><span class="line">      ).add(</span><br><span class="line">        <span class="keyword">new</span> EasyNews(&#123; <span class="attr">text</span>: <span class="string">'五大雷人跑步机'</span> &#125;)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  ).add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>).add(</span><br><span class="line">      <span class="keyword">new</span> TypeNews(&#123;</span><br><span class="line">        text: <span class="string">'AK47不愿为费城打球'</span>,</span><br><span class="line">        type: <span class="string">'NBA'</span>,</span><br><span class="line">        pos: <span class="string">'left'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  ).add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>).add(</span><br><span class="line">      <span class="keyword">new</span> TypeNews(&#123; <span class="attr">text</span>: <span class="string">'火炮飙6三分创新高'</span>, <span class="attr">type</span>: <span class="string">'CBA'</span>, <span class="attr">pos</span>: <span class="string">'right'</span> &#125;)</span><br><span class="line">    )</span><br><span class="line">  ).show();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error.stack || error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元模式（FlyWeight）：运用共享技术有效地支持大量的细粒度的对象，避免对象间拥有相同内容造成多余的开销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的代码示范</span></span><br><span class="line"><span class="comment">// let article = [];</span></span><br><span class="line"><span class="comment">// let dom = null;</span></span><br><span class="line"><span class="comment">// let paper = 0;</span></span><br><span class="line"><span class="comment">// let num = 5;</span></span><br><span class="line"><span class="comment">// let i = 0;</span></span><br><span class="line"><span class="comment">// let len = (article || []).length;</span></span><br><span class="line"><span class="comment">// for (;i &lt; len; i += 1) &#123;</span></span><br><span class="line"><span class="comment">//   dom = document.createElement('div');</span></span><br><span class="line"><span class="comment">//   dom.innerHTML = article[i];</span></span><br><span class="line"><span class="comment">//   if (i &gt;= num) &#123;</span></span><br><span class="line"><span class="comment">//     dom.style.display = 'none';</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   document.getElementById('container').appendChild(dom);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// document.getElementById('next_page').onclick = function() &#123;</span></span><br><span class="line"><span class="comment">//   const div = document.getElementById('container').getElementsByTagName('div');</span></span><br><span class="line"><span class="comment">//   let j = 0;</span></span><br><span class="line"><span class="comment">//   let k = 0;</span></span><br><span class="line"><span class="comment">//   let n = 0;</span></span><br><span class="line"><span class="comment">//   for (;j &lt; len; j += 1) &#123;</span></span><br><span class="line"><span class="comment">//     div[j].style.display = 'none';</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   for (;k &lt; 5; k += 1) &#123;</span></span><br><span class="line"><span class="comment">//     if (div[n + k]) &#123;</span></span><br><span class="line"><span class="comment">//       div[n + k].style.display = 'block';</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元对象</span></span><br><span class="line"><span class="keyword">const</span> FlyWeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 已创建的元素</span></span><br><span class="line">  <span class="keyword">const</span> created = [];</span><br><span class="line">  <span class="comment">// 创建一个新闻包装容器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="comment">// 将容器插入新闻列表容器中</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).appendChild(dom);</span><br><span class="line">    <span class="comment">// 缓存新创建的元素</span></span><br><span class="line">    created.push(dom);</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 获取创建新闻元素方法</span></span><br><span class="line">    getDiv: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果已创建的元素小于当前页元素总个数，则创建</span></span><br><span class="line">      <span class="keyword">if</span> (created.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> create();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取第一个元素并插入最后面</span></span><br><span class="line">      <span class="keyword">const</span> div = created.shift();</span><br><span class="line">      created.push(div);</span><br><span class="line">      <span class="keyword">return</span> div;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> article = [];</span><br><span class="line"><span class="keyword">let</span> dom = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> paper = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> len = (article || []).length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (article[i]) &#123;</span><br><span class="line">    <span class="comment">// 通过享元类创建获取的元素并写入新闻内容</span></span><br><span class="line">    FlyWeight.getDiv().innerHTML = article[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'next_page'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (;j &lt; len; j += <span class="number">1</span>) &#123;</span><br><span class="line">    div[j].style.display = <span class="string">'none'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (;k &lt; <span class="number">5</span>; k += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (div[n + k]) &#123;</span><br><span class="line">      div[n + k].style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 现在生成新闻界面就简单了</span></span><br><span class="line"><span class="comment">// 下一页按钮绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'next_page'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果新闻内容不足5条则返回</span></span><br><span class="line">  <span class="keyword">if</span> (article.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> n = ++paper * num % len; <span class="comment">// 获取当前页的第一条新闻索引</span></span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 插入5条新闻</span></span><br><span class="line">  <span class="keyword">for</span> (;j &lt; <span class="number">5</span>; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果存在n + j 条则插入</span></span><br><span class="line">    <span class="keyword">if</span> (article[n + j]) &#123;</span><br><span class="line">      FlyWeight.getDiv().innerHTML = article[n + j];</span><br><span class="line">      <span class="comment">// 否则插入其实位置第 n + j - len 条</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (article[n + j - len]) &#123;</span><br><span class="line">      FlyWeight.getDiv().innerHTML = article[n + j - len];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      FlyWeight.getDiv().innerHTML = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元动作</span></span><br><span class="line"><span class="keyword">const</span> FlyWeight2 = &#123;</span><br><span class="line">  moveX: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">  &#125;,</span><br><span class="line">  moveY: <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他任何角色都可以通过继承的方式来实现这些方法，比如让人继承移动方法</span></span><br><span class="line"><span class="keyword">const</span> Player = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; x, y, color &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Player.prototype = FlyWeight2;</span><br><span class="line">Player.prototype.changeC = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 让精灵继承移动的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Spirit = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; x, y, r &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  <span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Spirit.prototype = FlyWeight2;</span><br><span class="line"></span><br><span class="line">Spirit.prototype.changeR = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.r = r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>本文所有相关内容均来自于张容铭作者的Javascript设计模式，只供学习所用，切勿转载。如有侵权，请联系我，我会立即删除</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计&quot;&gt;&lt;a href=&quot;#结构型设计模式关注于如何将类或对象组合成更大、更复杂的结构，以简化设计&quot; class=&quot;headerlink&quot; title=&quot;结构型设计模式关注于如何将类或对象组合成更大
      
    
    </summary>
    
    
      <category term="javascript design" scheme="http://blog.xutengfeng.com/tags/javascript-design/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://blog.xutengfeng.com/2017/11/26/test/"/>
    <id>http://blog.xutengfeng.com/2017/11/26/test/</id>
    <published>2017-11-26T11:15:14.000Z</published>
    <updated>2018-07-10T03:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>haha</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;haha&lt;/p&gt;

      
    
    </summary>
    
      <category term="编程" scheme="http://blog.xutengfeng.com/categories/programming/"/>
    
    
      <category term="测试" scheme="http://blog.xutengfeng.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.xutengfeng.com/2017/11/26/hello-world/"/>
    <id>http://blog.xutengfeng.com/2017/11/26/hello-world/</id>
    <published>2017-11-26T08:43:51.132Z</published>
    <updated>2018-07-10T03:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
